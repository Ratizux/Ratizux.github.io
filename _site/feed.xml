<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ratizux</title>
    <description>Blockcity 使用 Jekyll 搭建的博客&lt;br/&gt;使用 Creative Commons&lt;br/&gt;请阅读一下关于页面
</description>
    <link>https://ratizux.github.io/</link>
    <atom:link href="https://ratizux.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 22 Jun 2019 23:01:41 +0800</pubDate>
    <lastBuildDate>Sat, 22 Jun 2019 23:01:41 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>笔记 | Linux 的小技巧</title>
        <description>&lt;h1 id=&quot;用-wget-下载网页&quot;&gt;用 Wget 下载网页&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget -c -r -np -H -p -k 链接&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-c 启用断点续传，这样下载失败时无需完全重新下载。&lt;/p&gt;

&lt;p&gt;-r 启用递归下载，可以下载整个网页。&lt;/p&gt;

&lt;p&gt;-np 递归时不追溯到上级目录。如果你需要，也可以去掉这个参数。&lt;/p&gt;

&lt;p&gt;-H 启用转向外部主机，网页中可能包含其他服务器中的资源。&lt;/p&gt;

&lt;p&gt;-p 下载所有元素。&lt;/p&gt;

&lt;p&gt;-k 将绝对链接转化为相对链接以便本地访问。&lt;/p&gt;

&lt;h1 id=&quot;分析文件夹占用的空间&quot;&gt;分析文件夹占用的空间&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;du -sh *|sort -h&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;挂载使用-ram-空间的-tmpfs&quot;&gt;挂载使用 RAM 空间的 tmpfs&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mount -t tmpfs -o size=大小 tmpfs 挂载点&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;查看存储设备的信息&quot;&gt;查看存储设备的信息&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo blkid (块设备)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo blkid&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo blkid /dev/sda1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;查看分区用量&quot;&gt;查看分区用量&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;df (挂载点)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;df -h&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;df -h /&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;查看挂载点&quot;&gt;查看挂载点&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findmnt&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;检查文件系统&quot;&gt;检查文件系统&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo fsck 块设备&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo fsck /dev/sda1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;简单的-chroot&quot;&gt;简单的 Chroot&lt;/h1&gt;

&lt;p&gt;假设已进入容器 rootfs 目录命名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;rootfs&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;挂载时：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd rootfs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount --types proc /proc proc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount -o bind /sys sys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount -o bind /dev dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount -o bind /run run&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chroot .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;卸载时：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;umount --recursive rootfs&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;用-rsync-备份数据&quot;&gt;用 Rsync 备份数据&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rsync -s --delete 原路径 备份路径&lt;/code&gt; 就好。注意文件夹名后的斜杠不能随意增删，不能把&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/&lt;/code&gt;写作&lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt;。别问我是怎么知道的。&lt;/p&gt;

&lt;p&gt;例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;rsync -s --delete /home/ /mnt/&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;rsync -s --delete /home /mnt&lt;/code&gt;是一样的意思，执行后&lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt&lt;/code&gt;目录的内容会和&lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt;一致。但如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;rsync -s --delete /home /mnt/&lt;/code&gt;，rsync 就会在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt&lt;/code&gt; 目录下创建一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;home&lt;/code&gt; 的文件夹用来存放数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谨慎操作。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jun 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/06/22/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/06/22/1.html</guid>
        
        
      </item>
    
      <item>
        <title>分享 | UserLAnd 让你在 Android 设备上使用 GNU/Linux 容器</title>
        <description>&lt;p&gt;一个运行于 Android 上的容器管理器。&lt;/p&gt;

&lt;p&gt;有想到 Linux Deploy 吗？&lt;br /&gt;
不同的是， Linux Deploy 默认使用 Chroot 容器，而 UserLAnd 使用 PRoot。这样带来的好处就是无需 Root 权限。&lt;br /&gt;
最近，为 Android 设备获取 Root 权限越来越困难，所以这一特性尤其有价值。&lt;/p&gt;

&lt;p&gt;UserLAnd 使用相对 Linux Deploy 更美观的前端，令人耳目一新。不过官方支持的发行版很少。&lt;/p&gt;

&lt;p&gt;你可以只安装某一个或几个软件，UserLAnd 会自动配置一个 Debian 容器来运行它们。&lt;br /&gt;
或者，你也可以安装一个桌面环境。这样体验会和 Linux Deploy 差不多。&lt;br /&gt;
如果你选择安装桌面环境，建议安装 &lt;a href=&quot;https://ratizux.github.io/res/vncviewer.apk&quot;&gt;VNC Viewer&lt;/a&gt; 或 &lt;a href=&quot;https://ratizux.github.io/res/xserverxsdl.apk&quot;&gt;XServer XSDL&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;缺点就是国内下载容器 RootFS (通俗来讲类似系统镜像，不过是半配置好的) 的时候很慢。&lt;/p&gt;

&lt;p&gt;如果你准备好试一试了，&lt;a href=&quot;https://f-droid.org/en/packages/tech.ula/&quot;&gt;此处&lt;/a&gt;是 UserLAnd 的 F-Droid 下载页。&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/05/09/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/05/09/1.html</guid>
        
        
      </item>
    
      <item>
        <title>观点 | 不友好的技术社区</title>
        <description>&lt;p&gt;不针对任何一个社区，仅在此表达本人看法。&lt;/p&gt;

&lt;h1 id=&quot;歧视新手&quot;&gt;歧视新手&lt;/h1&gt;

&lt;p&gt;看上去大部分社区都有这样的人存在。是的，我们承认，我们的技术没有你的好，有时新手也很烦人。&lt;/p&gt;

&lt;p&gt;但是冷落、歧视、嘲笑新手，甚至拿新手取乐、将新手的言论挂在频道上示众，就完全是道德问题了。难道新手就是用来娱乐大众的吗？&lt;/p&gt;

&lt;p&gt;多说一句，那些歧视新手的”大佬”，难道不是从新手阶段开始学习技术的吗？&lt;/p&gt;

&lt;h1 id=&quot;偏见与狂热者&quot;&gt;偏见与狂热者&lt;/h1&gt;

&lt;p&gt;“Arch 是最好的发行版”&lt;/p&gt;

&lt;p&gt;对有些人来说 Arch 确实很适合他们。但我认为发行版没有好坏之分，只有适不适合之分。&lt;/p&gt;

&lt;p&gt;“Debian 是最古老的发行版”&lt;/p&gt;

&lt;p&gt;真的是这样吗？看一下 Linux 发行版时间线就能一眼发现问题。&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Linux_Distribution_Timeline.svg/2820px-Linux_Distribution_Timeline.svg.png&quot;&gt;链接在这里&lt;/a&gt;（需科学上网）。&lt;/p&gt;

&lt;p&gt;“APT 是最好用的包管理器”&lt;/p&gt;

&lt;p&gt;zypper 也许不是最好的包管理器，但和 APT 比较一下，你就会知道哪个更好。&lt;/p&gt;

&lt;h1 id=&quot;滥用权力&quot;&gt;滥用权力&lt;/h1&gt;

&lt;p&gt;“滥权”。还有些网友专为滥权制作了一组 Telegram 贴纸。有时候你说了几句管理员不喜欢的话，也没有违反社区规定。甚至有时候是因为管理员对你的嫉妒，你就被封禁了。&lt;/p&gt;

&lt;p&gt;感觉怎么样？&lt;/p&gt;

&lt;p&gt;但是滥用权力现象似乎普遍存在。&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;我认为好的社区，不应存在以上行为————至少可以不影响正常交流。&lt;/p&gt;

&lt;p&gt;例如 openSUSE 和 Gentoo 社区。可惜这两个发行版都并不属于主流。&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/03/09/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/03/09/1.html</guid>
        
        
      </item>
    
      <item>
        <title>分享 | Pikayi 的一些照片</title>
        <description>&lt;p&gt;摄影爱好者 Pikayi 拍摄的一些照片。你可以订阅他的 Telegram 频道:&lt;a href=&quot;https://t.me/mofa404&quot;&gt;某不科学的404膜法小恐龙&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;使用 CC BY-SA 4.0 。图片已经过压缩处理，你可以点击图片下方的链接下载原图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/1.jpeg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_111062749879351_20190206_180644789.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/2.jpeg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_285818041457999_20190210_180620861.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/3.jpeg&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_335248671121695_20190211_192357716.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/4.jpeg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_335487798178218_20190211_192756843.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/5.jpeg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_338822241767988_20190211_202712096.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/6.jpeg&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_343570261505656_20190211_221422480.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/7.jpeg&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_350990460730741_20190130_213405702.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/8.jpeg&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_351499346218724_20190130_214234588.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/9.jpeg&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_427380429544309_20190201_203529613.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/10.jpeg&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_467582359520016_20190214_214656254.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/11.jpeg&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_516038610747311_20190204_084919629.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/12.jpeg&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_683901181540049_20190219_203148132.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ratizux.github.io/res/13.jpeg&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ratizux.github.io/res/LRM_EXPORT_693774263099512_20190220_001821096.jpeg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Mar 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/03/02/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/03/02/1.html</guid>
        
        
      </item>
    
      <item>
        <title>笔记 | 指定 Mozilla Firefox 的数据目录</title>
        <description>&lt;p&gt;Mozilla Firefox 提供了指定数据目录的功能。看似不起眼，但你可以通过这个功能实现很多新玩法。&lt;/p&gt;

&lt;h1 id=&quot;随身携带-firefox&quot;&gt;随身携带 Firefox&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;在U盘上创建一个文件夹，用来存放 Firefox 数据。或者，你也可以把你主文件夹里的&lt;code class=&quot;highlighter-rouge&quot;&gt;.mozilla&lt;/code&gt;复制过去。&lt;/li&gt;
  &lt;li&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;firefox --profile 文件夹名&lt;/code&gt;。你可以写一个脚本来做到一键启动。&lt;/li&gt;
  &lt;li&gt;如果你想创建一个专用的 Firefox 配置文件，也可以这么做！&lt;/li&gt;
  &lt;li&gt;或者你不想在每台公用电脑系统上都安装 Firefox ，你可以从 Mozilla Firefox 官网下载二进制文件，放在U盘里运行。看下面！&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;真正做到随身携带的-firefox&quot;&gt;真正做到随身携带的 Firefox&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;从 Mozilla 下载 Firefox 二进制文件(推荐使用ESR版本)，放在一个目录下，比如firefox/。&lt;/li&gt;
  &lt;li&gt;在这个目录外面再套一个目录，并创建一个数据目录，如mozilla/。&lt;/li&gt;
  &lt;li&gt;在目录中执行&lt;code class=&quot;highlighter-rouge&quot;&gt;firefox/firefox --profile mozilla/&lt;/code&gt;。也可以写成脚本。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;完全无痕的firefox&quot;&gt;完全无痕的Firefox&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;firefox-profile-dir
firefox &lt;span class=&quot;nt&quot;&gt;--profile&lt;/span&gt; firefox-profile-dir
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; firefox-profile-dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/02/28/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/02/28/1.html</guid>
        
        
      </item>
    
      <item>
        <title>笔记 | LXQt 的简单美化</title>
        <description>&lt;p&gt;用 LXQt+OpenBox 可以让你的古董电脑起飞(还是不行？试试IceWM。)&lt;/p&gt;

&lt;p&gt;LXQt 的默认预设并不美观。但如果你的电脑性能不足以使用 MATE DE 而不得不使用 LXQt ，你可能可以调教一下LXQt:&lt;/p&gt;

&lt;h1 id=&quot;安装主题-如果你在使用-lubuntu-1810可以跳过这一步&quot;&gt;安装主题 （如果你在使用 Lubuntu 18.10，可以跳过这一步。）&lt;/h1&gt;

&lt;p&gt;在&lt;a href=&quot;https://ratizux.github.io/res/theme.tar.xz&quot;&gt;此处&lt;/a&gt;下载笔者打包好的所需文件。&lt;/p&gt;

&lt;p&gt;OpenBox 主题: Lubuntu Arc ，放在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/themes/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;LXQt 主题: Ambiance ， LXQt 预置。&lt;/p&gt;

&lt;p&gt;图标包: Papirus-Dark ，放在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/icons/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;字体: ubuntu ，放在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/fonts/truetype/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;h1 id=&quot;配置&quot;&gt;配置&lt;/h1&gt;

&lt;p&gt;打开 LXQt 配置中心，将 OpenBox 主题， LXQt 主题，图标包和字体设置好。&lt;/p&gt;

&lt;p&gt;右键面板上左下角的应用程序菜单，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;配置&quot;程序菜单&quot;&lt;/code&gt;，将图标设置为发行版图标(例如 Ubuntu 为&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/icons/Papirus/64x64/apps/distributor-logo-ubuntu.svg&lt;/code&gt;)，文字设为发行版名称，可以让应用程序菜单看上去更美观。&lt;/p&gt;

&lt;p&gt;修改一个合适的壁纸让你的桌面更美观。例如 Lubuntu 的默认壁纸加上 Ubuntu 图标:&lt;a href=&quot;https://ratizux.github.io/res/ubuntu.png&quot;&gt;这里&lt;/a&gt;是一个例子。&lt;/p&gt;

&lt;h1 id=&quot;休眠快捷方式&quot;&gt;休眠快捷方式&lt;/h1&gt;

&lt;p&gt;如果 LXQt 的电源管理不好用，你又希望用休眠代替关机来加快恢复速度，你可以这样做。&lt;/p&gt;

&lt;p&gt;在一个目录(建议是你的主目录)放置一个内容为&lt;code class=&quot;highlighter-rouge&quot;&gt;echo 你的密码|sudo -S systemctl hibernate&lt;/code&gt;的脚本，给予可执行权限。&lt;/p&gt;

&lt;p&gt;在桌面上放置一个内容如下的桌面配置文件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Desktop Entry]
Version=1.0
Name=Systemd 快速休眠技术
Comment=一发休眠让你爽到升天
Exec=放置脚本的路径
Icon=system-shutdown
Type=Application
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;右键，勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust this executeable&lt;/code&gt;。你就可以通过快捷方式快速启动休眠了。&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Feb 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/02/25/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/02/25/1.html</guid>
        
        
      </item>
    
      <item>
        <title>分享 | Termux 让你在 Android 手机上简单地使用终端</title>
        <description>&lt;p&gt;你是 GNU/Linux 用户吗？试试在 Andoroid 手机上使用 Termux 来让你找回”家的温暖”。&lt;/p&gt;

&lt;p&gt;(或者，你也可以试一下用 Linux Deploy 在 Android 手机上管理 chroot 容器。)&lt;/p&gt;

&lt;p&gt;你可以在 &lt;a href=&quot;https://f-droid.org/packages/com.termux/&quot;&gt;F-Droid 的这个页面&lt;/a&gt;下载 Termux 。完成后保持网络通畅并打开 Termux ，等待安装完成。目前，你无需科学上网就能连接 Termux 的官方软件源。如果不行，请试试使用代理。&lt;/p&gt;

&lt;h1 id=&quot;新手上路&quot;&gt;新手上路&lt;/h1&gt;

&lt;p&gt;使用 Termux 时，你会发现很多操作都与电脑上的相似。即使对于新手，它也不是太难上手。&lt;/p&gt;

&lt;p&gt;如果需要，你可以看看 Linux 终端入门之类的教程。&lt;/p&gt;

&lt;h1 id=&quot;使用-android-上的资源&quot;&gt;使用 Android 上的资源&lt;/h1&gt;

&lt;p&gt;Termux 提供了一个指令：&lt;code class=&quot;highlighter-rouge&quot;&gt;termux-setup-storage&lt;/code&gt;。执行后，你就能在主目录发现一个链接到内置存储的文件。&lt;/p&gt;

&lt;h1 id=&quot;安装-vim&quot;&gt;安装 Vim&lt;/h1&gt;

&lt;p&gt;Vim 是终端下的一款强大的编辑器。执行&lt;code class=&quot;highlighter-rouge&quot;&gt;apt install vim -y&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg in vim -y&lt;/code&gt;来安装 Vim。&lt;/p&gt;

&lt;h1 id=&quot;修改系统配置&quot;&gt;修改系统配置&lt;/h1&gt;

&lt;p&gt;进入终端后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../usr/etc/&lt;/code&gt;进入存放大多数配置文件的目录。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;motd&lt;/code&gt;：你每次打开终端时显示的内容(问候语)。如果你不喜欢自带的问候语，你可以在这里修改。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash.bashrc&lt;/code&gt;：每次打开终端时执行的指令。如果你想让终端启动时自动执行事务或者想要缩写命令，编辑提示符，可以修改此文件。例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias &quot;l&quot;=&quot;ls&quot;&lt;/code&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;缩写为&lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;PS1='\$ '&lt;/code&gt;改为&lt;code class=&quot;highlighter-rouge&quot;&gt;PS1='&amp;gt; '&lt;/code&gt;以将提示符由&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;改为&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt/&lt;/code&gt;：存放 apt 配置文件的目录。执行&lt;code class=&quot;highlighter-rouge&quot;&gt;vim apt/sources.list&lt;/code&gt;来用 Vim 编辑软件源。如果你在中国大陆，你可以将软件源改为 TUNA 镜像站以达到加速的目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;进入Vim后，右滑打开菜单并长按”KEYBOARD”键启用虚拟按键。&lt;/li&gt;
  &lt;li&gt;按I进入插入模式，像普通的文本编辑器一样操作，将&lt;code class=&quot;highlighter-rouge&quot;&gt;termux.net&lt;/code&gt;改为&lt;code class=&quot;highlighter-rouge&quot;&gt;mirrors.tuna.tsinghua.edu.cn&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;按ESC退出插入模式，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;:x&lt;/code&gt;保存文件并退出。&lt;/li&gt;
  &lt;li&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;apt update&lt;/code&gt;刷新软件源缓存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改完毕后，建议执行&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;切换到主目录以确保你不会把文件放到错误的地方。&lt;/p&gt;

&lt;h1 id=&quot;安装-clang-编译器并编译-c-程序&quot;&gt;安装 Clang 编译器并编译 C++ 程序&lt;/h1&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;apt install clang&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg in clang&lt;/code&gt;来安装 Clang 。&lt;/p&gt;

&lt;p&gt;确保已经打开虚拟按键(右滑打开菜单并长按”KEYBOARD”键启用)或连接物理键盘，否则可能无法退出 Vim 。执行&lt;code class=&quot;highlighter-rouge&quot;&gt;vim hello.cpp&lt;/code&gt;，按 I 进入插入模式，输入以下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;
int main()
{
cout&amp;lt;&amp;lt;&quot;Hello, world!\n&quot;;
return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完成后，按 ESC 退出插入模式。输入&lt;code class=&quot;highlighter-rouge&quot;&gt;:x&lt;/code&gt;保存并退出，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;clang -o hello hello.cpp&lt;/code&gt;并执行&lt;code class=&quot;highlighter-rouge&quot;&gt;./hello&lt;/code&gt;，程序应该会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, world!&lt;/code&gt;。这说明你的 Clang 编译器正常工作。&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Feb 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/02/22/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/02/22/1.html</guid>
        
        
      </item>
    
      <item>
        <title>教程 | 用 Docker 容器折腾 Linux</title>
        <description>&lt;p&gt;如果你是一位刚开始使用 Linux 的初学者，你可能需要上机熟悉下操作————比如安装 LNMP 。但拿自己的主力机”做实验”未免代价太大，使用 VPS 又会产生较大的开销。你可能会选择使用 VM ，但你也可以使用 Docker 容器，一种更轻量快速的方式。&lt;/p&gt;

&lt;h1 id=&quot;使用-docker-容器的优点&quot;&gt;使用 Docker 容器的优点&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;与主系统共用一个内核，相对 VM 而言更快速，不会像 VM 那样明显的拖慢你的系统。&lt;/li&gt;
  &lt;li&gt;大量镜像可供下载，你不再需要把时间浪费在安装系统上。(当然，你不能在 Docker 上练习操作系统的安装，因为镜像是开箱即用的。除非你做得到！)&lt;/li&gt;
  &lt;li&gt;便于备份。如果你失败了就恢复重来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;安装-opensuse-容器&quot;&gt;安装 openSUSE 容器&lt;/h1&gt;

&lt;p&gt;确保 Docker 已安装并在运行(如果你使用 systemd 作为 init 系统(大部分发行版都是这样)，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl start docker&lt;/code&gt;启动 Docker 。)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker pull opensuse&lt;/code&gt;，下载 openSUSE 容器镜像。下载完成后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker run -dit --name container opensuse /bin/bash&lt;/code&gt;创建并启动 openSUSE 容器。&lt;/p&gt;

&lt;p&gt;通俗的讲，&lt;code class=&quot;highlighter-rouge&quot;&gt;-dit&lt;/code&gt;让容器后台运行，&lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;参数决定容器的命名。&lt;code class=&quot;highlighter-rouge&quot;&gt;opensuse&lt;/code&gt;是镜像的名字，&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;命令让 Bash 运行。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker attach container&lt;/code&gt;来连接容器的虚拟终端。&lt;code class=&quot;highlighter-rouge&quot;&gt;zypper ref&lt;/code&gt;刷新软件源，&lt;code class=&quot;highlighter-rouge&quot;&gt;zypper in 包名&lt;/code&gt;来安装软件包，&lt;code class=&quot;highlighter-rouge&quot;&gt;zypper --help&lt;/code&gt;查看帮助。&lt;/p&gt;

&lt;h1 id=&quot;安装软件&quot;&gt;安装软件&lt;/h1&gt;

&lt;p&gt;Docker 镜像一般较精简，所以你要自行安装你需要的软件包。这里是一些建议:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command-not-found&lt;/code&gt;帮助你找到能提供指令的软件包。&lt;code class=&quot;highlighter-rouge&quot;&gt;cnf 命令&lt;/code&gt;来使用，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;cnf ssh&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;Vim 是一款优秀的终端下的编辑器。当然建议先看看 Vim 的教程，不然你可能连怎么退出 Vim 都不知道！&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w3m&lt;/code&gt;命令行下的浏览器，有时候还挺有用的。虽然看上去很蠢！&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screenfetch&lt;/code&gt;快速了解你的容器参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;基本管理&quot;&gt;基本管理&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;来退出虚拟终端。因为终端的进程号为1，关闭终端后容器会自动关闭。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker ps&lt;/code&gt;列出正在运行的容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker ps -a&lt;/code&gt;列出所有容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker start 容器名&lt;/code&gt;启动容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker stop 容器名&lt;/code&gt;停止容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker attach 容器名&lt;/code&gt;连接到容器的虚拟终端&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker rm 容器名&lt;/code&gt;删除容器&lt;/p&gt;

&lt;p&gt;如果 openSUSE 有问题，你可以参考 &lt;a href=&quot;https://zh.opensuse.org&quot;&gt;openSUSE Wiki&lt;/a&gt; 或者通过&lt;a href=&quot;https://t.me/opensuse_cn&quot;&gt;链接&lt;/a&gt;加入 openSUSE 的官方群组。如果你有能力，参考 &lt;a href=&quot;https://wiki.archlinux.org&quot;&gt;ArchWiki&lt;/a&gt; 也可以。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Feb 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/02/21/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/02/21/1.html</guid>
        
        
      </item>
    
      <item>
        <title>教程 | 搭建使用 GitHub Pages 的 Jekyll 博客</title>
        <description>&lt;p&gt;想搭建自己的博客，却没有资金使用昂贵的 VPS ？你可以用 GitHub Pages 作为免费空间并搭建博客。&lt;/p&gt;

&lt;p&gt;以下内容假设你在使用 Ubuntu 18.10 或 openSUSE Tumbleweed (其他发行版类似)，并且已经拥有一个 GitHub 帐号。&lt;/p&gt;

&lt;p&gt;首先，前往 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; ，新建一个名为”你的用户名.github.io”的库。&lt;/p&gt;

&lt;h1 id=&quot;安装-git-和-jekyll&quot;&gt;安装 Git 和 Jekyll&lt;/h1&gt;

&lt;p&gt;如果你以前没有安装过 Git ，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install git&lt;/code&gt;来安装命令行 Git 。&lt;/p&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/你的用户名/你的用户名.github.io&lt;/code&gt;然后，&lt;code class=&quot;highlighter-rouge&quot;&gt;cd '你的用户名.github.io'&lt;/code&gt;来进入你的 GitHub 库。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install jekyll&lt;/code&gt;(Ubuntu)或&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo zypper in ruby2.6-rubygem-jekyll&lt;/code&gt;(openSUSE)来安装 Jekyll 。为了方便，我们先&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt;退出目录，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new site &amp;amp;&amp;amp; cd site &amp;amp;&amp;amp; jekyll serve -w&lt;/code&gt;。如果你现在打开浏览器并进入&lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt;，你就能看到你的静态博客了。&lt;/p&gt;

&lt;p&gt;先别急。回到终端，按Ctrl+C停止Jekyll，再执行&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt;。此时如果你执行&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;应当可以同时看到”site”和”你的用户名.github.io”两个文件夹。执行&lt;code class=&quot;highlighter-rouge&quot;&gt;cp -r site/* 你的用户名.github.io/&lt;/code&gt;把site里的所有文件复制到GitHub本地库里。&lt;code class=&quot;highlighter-rouge&quot;&gt;cd 你的用户名.github.io &amp;amp;&amp;amp; jekyll serve -w&lt;/code&gt;，如果这时候&lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt;能正常访问，你就可以把site文件夹删了。&lt;/p&gt;

&lt;h1 id=&quot;撰写文章&quot;&gt;撰写文章&lt;/h1&gt;

&lt;p&gt;进入”_posts”文件夹，你所有的文章都在里面。这篇教程中我们使用 Markdown 语法来写文章。新建一个名为”年-月-日-标题.格式”的文章。假设这篇文章是在2019年2月18日用 Markdown 写的，那么就把它命名为”2019-02-18-1.md”。&lt;/p&gt;

&lt;p&gt;打开我们刚创建的文档，输入头信息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: '你想给这篇文章的名字'
date: 写这篇文章的时间。例如&quot;2019-02-18 21:31:16 +0800&quot;
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取当前时间的一个简便方法是在你的终端里执行&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%F\ %T\ %z&lt;/code&gt;，然后把输出的时间粘贴到那里。当然直接写年份-时间-日期或者省略不写（把日期写在文件名里）也不是不可以。&lt;/p&gt;

&lt;p&gt;头信息下面是正文部分。如果你还不会写 Markdown ，建议你参考&lt;a href=&quot;http://www.markdown.cn/&quot;&gt;Markdown中文&lt;/a&gt;。写完之后保存文件。现在你可以修改一下上级目录里的”_config.yml”，让它看起来像一个正式的博客。顺便看一下&lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt;中的变化是否令你满意。如果一切都如预期发展，你现在就可以关闭文本编辑器和浏览器，在终端按Ctrl+C关闭Jekyll，然后你就可以把改动提交到GitHub库了。&lt;/p&gt;

&lt;p&gt;关闭 Jekyll ，不要退出终端。现在你应该还在”你的用户名.github.io”文件夹里。接着执行以下命令:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add --all&lt;/code&gt;添加所有文件到本地库。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.email 你的Email&lt;/code&gt;配置电子邮件地址。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.name 你的名字&lt;/code&gt;配置用户信息。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;提交信息&quot;&lt;/code&gt;添加提交信息。例如”新增了1篇文章”。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;并按照提示输入 GitHub 帐号和密码，将改动提交到远程 GitHub 库。&lt;/p&gt;

&lt;p&gt;打开浏览器，进入”https://你的用户名.github.io”即可看到你的博客。&lt;/p&gt;

&lt;h1 id=&quot;配置完成后做什么&quot;&gt;配置完成后做什么&lt;/h1&gt;

&lt;p&gt;如果你之后想要继续写文章，只需要:&lt;/p&gt;

&lt;p&gt;打开终端，&lt;code class=&quot;highlighter-rouge&quot;&gt;cd 你的用户名.github.io&lt;/code&gt;进入”你的用户名.github.io”文件夹。&lt;/p&gt;

&lt;p&gt;在”_posts”子文件夹里用你喜欢的语法写文章。&lt;/p&gt;

&lt;p&gt;回到”你的用户名.github.io”文件夹，执行”jekyll build”，生成静态网页。&lt;/p&gt;

&lt;p&gt;并和第一次操作时一样:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add --all&lt;/code&gt;添加所有文件到本地库。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;提交信息&quot;&lt;/code&gt;添加提交信息。比如”新增了1篇文章”。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;并按照提示输入 GitHub 帐号和密码，将改动提交到远程 GitHub 库。&lt;/p&gt;

&lt;p&gt;尽情享受 Jekyll 带来的便利吧！&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/02/18/2.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/02/18/2.html</guid>
        
        
      </item>
    
      <item>
        <title>笔记 | Hello, world!</title>
        <description>&lt;p&gt;使用 Jekyll 搭建的静态博客&lt;/p&gt;

&lt;p&gt;你可以随时订阅我的Telegram频道 &lt;a href=&quot;https://t.me/neblk&quot;&gt;NEBLK&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0800</pubDate>
        <link>https://ratizux.github.io/2019/02/18/1.html</link>
        <guid isPermaLink="true">https://ratizux.github.io/2019/02/18/1.html</guid>
        
        
      </item>
    
  </channel>
</rss>
